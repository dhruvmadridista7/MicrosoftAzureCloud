Param(
 [string]$VmResourceGroup,
 [string]$method,
 [string]$UAMI, 
 [string]$appgwname
)

$automationAccount = "Manoj-Automation"

# Ensures you do not inherit an AzContext in your runbook
Disable-AzContextAutosave -Scope Process | Out-Null

# Connect using a Managed Service Identity
try {
        Connect-AzAccount -Identity -ErrorAction stop -WarningAction SilentlyContinue | Out-Null
    }
catch{
        Write-Output "There is no system-assigned user identity. Aborting."; 
        exit
    }

# set and store context
$subID = (Get-AzContext).Subscription.Id
$AzureContext = Set-AzContext -SubscriptionId $subID

if ($method -eq "SA")
    {
        Write-Output "Using system-assigned managed identity"
    }
elseif ($method -eq "UA")
    {
        Write-Output "Using user-assigned managed identity"

        # Connects using the Managed Service Identity of the named user-assigned managed identity
        $identity = Get-AzUserAssignedIdentity -ResourceGroupName $VmResourceGroup -Name $UAMI -DefaultProfile $AzureContext

        # validates assignment only, not perms
        if ((Get-AzAutomationAccount -ResourceGroupName $VmResourceGroup -Name $automationAccount -DefaultProfile $AzureContext).Identity.UserAssignedIdentities.Values.PrincipalId.Contains($identity.PrincipalId))
            {
                Connect-AzAccount -Identity -AccountId $identity.ClientId | Out-Null

                # set and store context
                $AzureContext = Set-AzContext -SubscriptionId ($identity.id -split "/")[2]
            }
        else {
                Write-Output "Invalid or unassigned user-assigned managed identity"
                exit
            }
    }
else {
        Write-Output "Invalid method. Choose UA or SA."
        exit
     }


#Fetch vm name from resourcegroup 
$listvm = Get-AzVM -ResourceGroupName $VmResourceGroup
$vms = $listvm.name


foreach ($VmName in $vms)
{
    $VMInfo = Get-AzVM -Name $VmName
    $Location = $VMInfo.Location
    if ($VMInfo) {
        $status = Get-AzRecoveryServicesBackupStatus -Name $VmName -ResourceGroupName $VmResourceGroup  -Type "AzureVM" -DefaultProfile $AzureContext
        If ($status.VaultId) {
            $VaultName = $status.VaultId.Split('/')[-1]    
            Write-Output "The VM < $VmName > is member of RSV < $VaultName >"    
        }
        If ($status.BackedUp -eq $false) {
            Write-Output "The VM < $VmName > is not protected with Azure Backup. You should consider enabling it!" 
        } 
    }



#check the status of the Vm
$status = (Get-AzVM -ResourceGroupName $VmResourceGroup -Name $VmName -Status -DefaultProfile $AzureContext).Statuses[1].Code
if($status -eq "Powerstate/deallocated")
{
	$status

    #automatic fatch reserverd vm name
    $patterns = @('plmprdwbt0','plmprdent0','plmprdlic0')

    foreach($pattern in $patterns)
    {
	    if(($VmName | Select-String -Pattern $pattern) -ne $Null) 
	    {
		    $listvmname = Get-AzVM -ResourceGroupName $VmResourceGroup
		    $listvmname = $listvmname.name
		    $selectedvm = $listvmname | Select-String -Pattern $pattern
		    for($i = 1;$i -lt 9; ++$i)
		    {
			    $findvm = $pattern+$i
			    if(($selectedvm | Select-String -Pattern $findvm) -eq $Null)
			    {
				    Write-host "hi"
				    $newvmname = $findvm
				    break
			    }
		    }
		    break
	    }
    }

	#Restore an Azure VM
	$storageaccount = $newvmname+"storage001"
	#create a storage account
	New-AzStorageAccount -ResourceGroupName $VmResourceGroup `
	  -Name $storageaccount `
	  -Location $Location `
	  -SkuName Standard_RAGRS `
	  -Kind StorageV2
	
	#wait for sometime to storage account created
	Start-Sleep -Seconds 60


        Get-AzRecoveryServicesVault -Name $VaultName -ResourceGroupName $VmResourceGroup | Set-AzRecoveryServicesVaultContext

	#Select the VM (when restoring files)
	$targetVault = Get-AzRecoveryServicesVault -ResourceGroupName $VmResourceGroup -Name $VaultName
	$targetVault.ID
	$namedContainer = Get-AzRecoveryServicesBackupContainer  -ContainerType "AzureVM" -Status "Registered" -FriendlyName $VmName -VaultId $targetVault.ID
	$backupitem = Get-AzRecoveryServicesBackupItem -Container $namedContainer  -WorkloadType "AzureVM" -VaultId $targetVault.ID
	

	#Choose a recovery point (when restoring files)
	$startDate = (Get-Date).AddDays(-7)
	$endDate = Get-Date
	$rp = Get-AzRecoveryServicesBackupRecoveryPoint -Item $backupitem -StartDate $startdate.ToUniversalTime() -EndDate $enddate.ToUniversalTime() -VaultId $targetVault.ID
	$rp[0]


	#Restore the disks
	$restorejob = Restore-AzRecoveryServicesBackupItem -RecoveryPoint $rp[0] -StorageAccountName $storageaccount -StorageAccountResourceGroupName $VmResourceGroup -TargetResourceGroupName $VmResourceGroup -VaultId $targetVault.ID
	Wait-AzRecoveryServicesBackupJob -Job $restorejob -Timeout 43200

	

	#get restored disk
	$Disk = Get-AzDisk -Resourcegroup $VmResourceGroup | Where-Object { $_.ManagedBy -eq $Null}
	$Disk = $Disk.Id | Select-String -Pattern $VmName
	$count = $Disk.count
	
	#get size of old vm
	$currentVm = Get-AzVM -Name $VmName
	$size = $currentVm.HardwareProfile.VmSize


	

	Start-Sleep -Seconds 10
	#creating new VM

	$appgw = Get-AzApplicationGateway -ResourceGroupName $VmResourceGroup -Name $appgwname
	$backendpoolname=$appgw.BackendAddressPools.Name
	$backendPool = Get-AzApplicationGatewayBackendAddressPool -Name $backendpoolname -ApplicationGateway $appgw
	$vnet   = Get-AzVirtualNetwork -ResourceGroupName  $VmResourceGroup 
	$subnet = Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $vnet
	$subnet=$subnet.Name[1]

	$subnet=Get-AzVirtualNetworkSubnetConfig -VirtualNetwork $vnet -Name $subnet

	#create new nic

	$nicName = $newvmname+"NicName"
	$nic = New-AzNetworkInterface `
    	-Name $nicName `
   	    -ResourceGroupName $VmResourceGroup `
    	-Location $Location `
    	-Subnet $subnet `
    	-ApplicationGatewayBackendAddressPool $backendpool
	
	#Set the VM name and size

	$newName = $newvmname
	$vmConfig = New-AzVMConfig -VMName $newName -VMSize $size

	#Add the NIC

	$vm = Add-AzVMNetworkInterface -VM $vmConfig -Id $nic.Id
	
	#Add the OS disk and data disk
	if($count -gt '1')
	{
		$vm = Set-AzVMOSDisk -VM $vm -ManagedDiskId $Disk[$count-1] -StorageAccountType Standard_LRS `
	    		-DiskSizeInGB 128 -CreateOption Attach -Windows	
		for ($i = 0; $i -lt $count-1; $i++)
		{
			$vm = Add-AzVMDataDisk -CreateOption Attach -Lun $i -VM $vm -ManagedDiskId $Disk[$i]
		}
	}
	else
	{
		$vm = Set-AzVMOSDisk -VM $vm -ManagedDiskId $Disk[$count-1] -StorageAccountType Standard_LRS `
	    		-DiskSizeInGB 128 -CreateOption Attach -Windows	
	}


	#Complete the VM
	New-AzVM -ResourceGroupName $VmResourceGroup -Location $Location -VM $vm

	Write-Host "VM is created and Backup is stored"
	Start-Sleep -Seconds 10
}
elseif ($status -eq "Powerstate/running")
{
	$status
	Start-Sleep -Seconds 10
}



}




